{"version":3,"sources":["../src/chord_ctrl.js"],"names":["MetricsPanelCtrl","_","rendering","ChordCtrl","$scope","$injector","$rootScope","$interpolate","$sanitize","templateSrv","detangleSrv","panelDefaults","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","addEditorTab","columnMap","columns","data","render","values","selectors","map","splice","concat","length","text","dataList","_error","type","dataFilter","getCustomConfig","rows","scope","elem","attrs","ctrl","prev_highlight_text","highlight_text","templateUrl"],"mappings":"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","file":"chord_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nexport class ChordCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope, $interpolate, $sanitize, templateSrv, detangleSrv) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    this.$interpolate = $interpolate;\n    this.$sanitize = $sanitize;\n    this.templateSrv = templateSrv;\n    this.detangleSrv = detangleSrv;\n    var panelDefaults = {\n\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    //this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-chord-panel/editor.html', 2);\n  }\n\n\n  onDataError() {\n    this.columnMap = [];\n    this.columns = [];\n    this.data = [];\n    this.render();\n  }\n\n\n  colorSelectOptions(){\n    var values = [\"index\",\"regular expression\"];\n\n    if(!this.columns)\n      return[];\n\n    var selectors = _.map(this.columns,\"text\");\n\n    selectors.splice(-1);\n    \n    return values.concat(selectors);\n  }\n\n  combineOptions(){\n    if(!this.columns || this.columns.length < 2)\n      return[];\n\n    return [\n      this.columns[0].text ,\n      this.columns[1].text ,\n      ];\n  }\n\n\n  onDataReceived(dataList) {\n    let data = dataList[0];\n\n    if(!data)\n    {\n      this._error = \"No data points.\";\n      return this.render();\n    }\n\n    if(data.type !== \"table\")\n    {\n      this._error = \"Should be table fetch. Use terms only.\";\n      return this.render();\n    }\n\n    this._error = null;\n\n    this.columnMap = data.columnMap; \n    this.columns = data.columns;\n    this.data = this.detangleSrv.dataFilter(dataList, this.detangleSrv.getCustomConfig(this.templateSrv, this.panel))[0].rows;\n    this.render(this.data);\n  }\n\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n\n  highlight(){\n    this.render(); \n    this.prev_highlight_text =  this.highlight_text;\n  }\n}\n\nChordCtrl.templateUrl = 'module.html';\n"]}