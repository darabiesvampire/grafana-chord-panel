{"version":3,"sources":["../src/mapper.js"],"names":["_","Mapper","data","mpr","mmap","n","matrix","filter","accessor","setFilter","fun","setAccessor","getMatrix","each","a","id","b","recs","row","getMap","printMatrix","elem","console","log","addToMap","value","info","name","addValuesToMap","varName","values","uniq","map","v","d","i","j","s","t","g","m","connectionArray","source","index","target","sname","sdata","svalue","stotal","reduce","k","tname","tdata","tvalue","ttotal","item","push","gname","gdata","gvalue","mtotal","m1","n1","m2","n2","connections"],"mappings":"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","file":"mapper.js","sourcesContent":["import _ from 'lodash';\n\n//*******************************************************************\n//  CHORD MAPPER\n//*******************************************************************\nexport default class Mapper {\n  static chordMpr (data) {\n    let mpr = {}, mmap = {}, n = 0,\n      matrix = [], filter, accessor;\n\n    mpr.setFilter = function (fun) {\n      filter = fun;\n      return this;\n    },\n      mpr.setAccessor = function (fun) {\n        accessor = fun;\n        return this;\n      },\n      mpr.getMatrix = function () {\n        matrix = [];\n        _.each(mmap, function (a) {\n          if (!matrix[a.id]) matrix[a.id] = [];\n          _.each(mmap, function (b) {\n            let recs = _.filter(data, function (row) {\n              return filter(row, a, b);\n            });\n            matrix[a.id][b.id] = accessor(recs, a, b);\n          });\n        });\n        return matrix;\n      },\n      mpr.getMap = function () {\n        return mmap;\n      },\n      mpr.printMatrix = function () {\n        _.each(matrix, function (elem) {\n          console.log(elem);\n        })\n      },\n      mpr.addToMap = function (value, info) {\n        if (!mmap[value]) {\n          mmap[value] = { name: value, id: n++, data: info }\n        }\n      },\n      mpr.addValuesToMap = function (varName, info) {\n        let values = _.uniq(_.map(data, varName));\n        _.map(values, function (v) {\n          if (!mmap[v]) {\n            mmap[v] = { name: v, id: n++, data: info }\n          }\n        });\n        return this;\n      };\n    return mpr;\n  }\n//*******************************************************************\n//  CHORD READER\n//*******************************************************************\n  static chordRdr (matrix, mmap) {\n    return function (d) {\n      let i, j, s, t, g, m = {}, connectionArray = [];\n      if (d.source) {\n        i = d.source.index; j = d.target.index;\n        s = _.filter(mmap, {id: i });\n        t = _.filter(mmap, {id: j });\n        m.sname = s[0].name;\n        m.sdata = d.source.value;\n        m.svalue = +d.source.value;\n        m.stotal = _.reduce(matrix[i], function (k, n) { return k + n }, 0);\n        m.tname = t[0].name;\n        m.tdata = d.target.value;\n        m.tvalue = +d.target.value;\n        m.ttotal = _.reduce(matrix[j], function (k, n) { return k + n }, 0);\n      } else {\n        g = _.filter(mmap, {id: d.index });\n        _.each(matrix[d.index], (item, index) => {\n          if (item > 0) {\n            connectionArray.push(_.filter(mmap, {id: index })[0].name);\n          }\n        });\n        m.gname = g[0].name;\n        m.gdata = g[0].data;\n        m.gvalue = d.value;\n      }\n      m.mtotal = _.reduce(matrix, function (m1, n1) {\n        return m1 + _.reduce(n1, function (m2, n2) { return m2 + n2}, 0);\n      }, 0);\n      m.connections = connectionArray;\n      return m;\n    }\n  }\n}\n"]}